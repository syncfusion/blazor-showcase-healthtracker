@page "/steps";

@inject SundayService HealthDataSunday
@inject MondayService HealthDataMonday
@inject WednesdayService HealthDataWednesday
@inject ThursdayService HealthDataThursday
@inject FridayService HealthDataFriday
@inject SaturdayService HealthDataSaturday
@inject TuesdayService HealthDataTuesday


<div class="col-sm-12 col-md-12 col-12 col-lg-8 col-xl-8" style="height:530px;">
    @if (isDataLoaded)
    {
    <div class="row">
        <div class="col-6">
            <div class="main-chart-title">Steps Taken</div>
        </div>
        <div class="col-5">
            <table align="right">
                <tr>
                    <td>
                        <div class="main-chart-sub-title" style="color: black;">Distance Travelled</div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="main-chart-sub-title2" style="color: #05AD13;">2.3 miles</div>
                    </td>
                </tr>
            </table>


        </div>

    </div>
    <div class="main-chart">
        <SfChart Background="#FAFAFA">
            <ChartEvents OnPointClick="@PointClick"></ChartEvents>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartStriplines>
                    <ChartStripline Start="9000" SizeType="SizeType.Pixel" Size="1" DashArray="5,5" Color='#BB830D' Text="Goal 9000 Steps" HorizontalAlignment="Anchor.End" VerticalAlignment="Anchor.End">
                        <ChartStriplineTextStyle Color="#BB830D" Size="14px" FontFamily="Roboto" FontWeight="500"></ChartStriplineTextStyle>
                    </ChartStripline>
                </ChartStriplines>
            </ChartPrimaryYAxis>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartTooltipSettings Enable="true" Format="Click to View Details"></ChartTooltipSettings>
            <ChartAnnotations>
                <ChartAnnotation X="@StepData[2].Day" Y="9800" CoordinateUnits="Units.Point">
                    <ContentTemplate>
                        <div id="thumbs_up"><img src="images/Shape.png" style="width: 30px; height: 30px;" alt="Shape" /></div>
                    </ContentTemplate>
                </ChartAnnotation>
            </ChartAnnotations>           
            <ChartSeriesCollection>
                <ChartSeries DataSource="@StepData" XName="Day" YName="Value" ColumnWidth="0.3" Fill="url(#gradient-chart)" Type="ChartSeriesType.Column">
                    <ChartCornerRadius TopLeft="10" TopRight="10"></ChartCornerRadius>
                    <ChartMarker Visible="false"></ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>
    }
    else
    {
        <SfSkeleton Width="100%" Height="100%" Effect="ShimmerEffect.Wave"></SfSkeleton>
    }
</div>
<div class="col-sm-12 col-md-12 col-12 col-lg-4 col-xl-4 second-chart-box" style="height: 530px;">
    @if (isDataLoaded)
    {
    <div class="pieHeader">@DayText</div>
    <div style="text-align: center">
        <SfAccumulationChart Background="transparent" @ref="@StepPie" Height="330px" Width="320px" ID="PieChart">
            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries StartAngle="180" EndAngle="180" Radius="100%" InnerRadius="86%" DataSource="@StepsStepData" XName="X" YName="Y" Palettes="@StepPalette"></AccumulationChartSeries>
            </AccumulationChartSeriesCollection>
            <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
            <AccumulationChartAnnotations>
                <AccumulationChartAnnotation Region="Regions.Chart" X="50%" Y="50%">
                    <ContentTemplate>
                        <p class="pie-center-text">@centerContent</p>
                        <p class="pie-center-sub-text">Calories Burnt</p>
                    </ContentTemplate>
                </AccumulationChartAnnotation>
                <AccumulationChartAnnotation Region="Regions.Chart" X="50%" Y="50%">
                    <ContentTemplate>
                        <SfAccumulationChart Background="transparent" @ref="@ExerPie" Height="330px" Width="330px">
                            <AccumulationChartBorder Color="transparent"></AccumulationChartBorder>
                            <AccumulationChartSeriesCollection>
                                <AccumulationChartSeries StartAngle="180" EndAngle="180" Radius="80%" InnerRadius="82.5%" DataSource="@ExerData" XName="X" YName="Y" Palettes="@ExerPalette"></AccumulationChartSeries>
                            </AccumulationChartSeriesCollection>
                            <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                        </SfAccumulationChart>
                    </ContentTemplate>
                </AccumulationChartAnnotation>
                <AccumulationChartAnnotation Region="Regions.Chart" X="50%" Y="50%">
                    <ContentTemplate>
                        <SfAccumulationChart Background="transparent" @ref="@HourPie" Height="330px" Width="330px">
                            <AccumulationChartSeriesCollection>
                                <AccumulationChartSeries StartAngle="180" EndAngle="180" Radius="60%" InnerRadius="75%" DataSource="@HourData" XName="X" YName="Y" Palettes="@HourPalette"></AccumulationChartSeries>
                            </AccumulationChartSeriesCollection>
                            <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                        </SfAccumulationChart>
                    </ContentTemplate>
                </AccumulationChartAnnotation>
                <AccumulationChartAnnotation Region="Regions.Series" X="53%" Y="97%">
                    <ContentTemplate>
                        <div class="icon-steps" style="text-align: end" />
                    </ContentTemplate>
                </AccumulationChartAnnotation>
                <AccumulationChartAnnotation Region="Regions.Series" X="53%" Y="87%">
                    <ContentTemplate>
                        <div class="icon-workout" />
                    </ContentTemplate>
                </AccumulationChartAnnotation>
                <AccumulationChartAnnotation Region="Regions.Series" X="53%" Y="77%">
                    <ContentTemplate>
                        <div class="icon-active" />
                    </ContentTemplate>
                </AccumulationChartAnnotation>
            </AccumulationChartAnnotations>
        </SfAccumulationChart>
    </div>
    <div class="row" style="margin-top: 40px">
        <div class="col-4">
            <div class="pieFooter" style="color: #078411;">
                @StepText
            </div>
            <table class="table table-borderless" style="margin-left: 13%">
                <tr>
                    <td>
                        <div class="icon-steps" style="padding-right: 3px; text-align: end;" />
                    </td>
                    <td>
                        Steps
                    </td>
                </tr>
            </table>
        </div>
        <div class="col-4">
            <div class="pieFooter" style="color: #4F7305;">
                @ExerText
            </div>
            <table class="table table-borderless" style="margin-left: 10%">
                <tr>
                    <td>
                        <div class="icon-workout" />
                    </td>
                    <td>
                        Exercise/min
                    </td>
                </tr>
            </table>

        </div>
        <div class="col-4">
            <div class="pieFooter" style="color: #A1A621;">
                @HourText
            </div>
            <table class="table table-borderless" style="margin-left: 10%">
                <tr>
                    <td>
                        <div class="icon-active" />
                    </td>
                    <td>
                        Active Hours
                    </td>
                </tr>
            </table>

        </div>
    </div>
    }
    else
    {
        <SfSkeleton Width="100%" Height="100%" Effect="ShimmerEffect.Wave"></SfSkeleton>
    }
</div>
<style>
    #gradient-chart stop {
        stop-color: #04AB11;
    }

        #gradient-chart stop[offset="0"] {
            stop-opacity: 1;
            stop-color: #7DD61D;
        }

        #gradient-chart stop[offset="1"] {
            stop-opacity: 1;
            stop-color: #04AB11;
        }

        #PieChart_Secondary_Element {
            width: 0px !important;
        }
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>
@code {
    SfAccumulationChart? ExerPie;
    SfAccumulationChart? HourPie;
    SfAccumulationChart? StepPie;
    string centerContent = "4285";
    string DayText;
    string StepText;
    string ExerText;
    string HourText;
    List<Data> StepData;
    List<ChartData> StepsStepData;
    List<ChartData> ExerData;
    List<ChartData> HourData;
    string[] StepPalette = new string[] { "#4F7305", "LightGrey" };
    string[] ExerPalette = new string[] { "#4F7305", "LightGrey" };
    string[] HourPalette = new string[] { "#A1A621", "LightGrey" };
    private bool isDataLoaded;

    private async void LoadData()
    {
        await GetChartData();
        isDataLoaded = true;
        StateHasChanged();
    }
    private async Task GetChartData()
    {
        await Task.Delay(2000);
        this.StepData = new List<Data>
{
            new Data { Day = "Sunday", Value = 8200 },
            new Data { Day = "Monday", Value = 7200 },
            new Data { Day = "Tuesday", Value = 9300 },
            new Data { Day = "Wednesday", Value = 6200 },
            new Data { Day = "Thursday", Value = 7000 },
            new Data { Day = "Friday", Value = 9000 },
            new Data { Day = "Saturday", Value = 5500 }
        };
        StepsStepData = HealthDataSunday.StepsStepData();
        ExerData = HealthDataSunday.StepsExcerciseData();
        HourData = HealthDataSunday.StepsHoursData();
        DayText = "Sunday Activity";
        StepText = "8200";
        ExerText = "15";
        HourText = "7";
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoadData();
        }
    }

    void PointClick(PointEventArgs args)
    {
        switch (args.PointIndex)
        {
            case 0:
                StepsStepData = HealthDataSunday.StepsStepData();
                ExerData = HealthDataSunday.StepsExcerciseData();
                HourData = HealthDataSunday.StepsHoursData();
                DayText = "Sunday Activity";
                ExerText = "15";
                HourText = "7";
                ExerPie.Series[0].DataSource = HealthDataSunday.StepsExcerciseData();
               
                break;
            case 1:
                StepsStepData = HealthDataMonday.StepsStepData();
                ExerData = HealthDataMonday.StepsExcerciseData();
                HourData = HealthDataMonday.StepsHoursData();
                DayText = "Monday Activity";
                ExerText = "20";
                HourText = "6";
                break;
            case 2:
                StepsStepData = HealthDataTuesday.StepsStepData();
                ExerData = HealthDataTuesday.StepsExcerciseData();
                HourData = HealthDataTuesday.StepsHoursData();
                DayText = "Tuesday Activity";
                ExerText = "25";
                HourText = "7";
                break;
            case 3:
                StepsStepData = HealthDataWednesday.StepsStepData();
                ExerData = HealthDataWednesday.StepsExcerciseData();
                HourData = HealthDataWednesday.StepsHoursData();
                DayText = "Wednesday Activity";
                ExerText = "15";
                HourText = "8";
                break;
            case 4:
                StepsStepData = HealthDataThursday.StepsStepData();
                ExerData = HealthDataThursday.StepsExcerciseData();
                HourData = HealthDataThursday.StepsHoursData();
                DayText = "Thursday Activity";
                ExerText = "20";
                HourText = "4";
                break;
            case 5:
                StepsStepData = HealthDataFriday.StepsStepData();
                ExerData = HealthDataFriday.StepsExcerciseData();
                HourData = HealthDataFriday.StepsHoursData();
                DayText = "Friday Activity";
                ExerText = "20";
                HourText = "6";
                break;
            case 6:
                StepsStepData = HealthDataSaturday.StepsStepData();
                ExerData = HealthDataSaturday.StepsExcerciseData();
                HourData = HealthDataSaturday.StepsHoursData();
                DayText = "Saturday Activity";
                ExerText = "15";
                HourText = "7";
                break;
        }
        dynamic item = args.Point;
        StepText = Convert.ToString(item.YValue);
        double value = item.YValue / 2 + Int32.Parse(ExerText) * 10 + Int32.Parse(HourText) * 5;
        centerContent = value.ToString();
        StateHasChanged();
    }
}
