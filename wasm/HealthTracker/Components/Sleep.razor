@page "/sleep";
@inject SundayService HealthDataSunday
@inject MondayService HealthDataMonday
@inject WednesdayService HealthDataWednesday
@inject ThursdayService HealthDataThursday
@inject FridayService HealthDataFriday
@inject SaturdayService HealthDataSaturday
@inject TuesdayService HealthDataTuesday
<div class="col-sm-12 col-md-12 col-12 col-lg-8 col-xl-8" style="height:530px;">
    @if (isDataLoaded)
    {
        <div class="row">
            <div class="col-6">
            <div class="main-chart-title">Sleep Tracker</div>
        </div>
        <div class="col-3">
            <table class="table table-borderless" align="right">
                <tr>
                    <td>
                        <div class="main-chart-sub-title" style="color: black;">Goal</div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="main-chart-sub-title2" style="color: rgb(69, 38, 166);">7.5hrs</div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="col-3">
            <table class="table table-borderless" align="right">
                <tr>
                    <td>
                        <div class="main-chart-sub-title" style="color: black;">Daily Average</div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="main-chart-sub-title2" style="color: rgb(69, 38, 166);">6.32hrs</div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="main-chart">
        <SfChart Background="#FAFAFA">
            <ChartEvents OnPointClick="FindSleepDayData"></ChartEvents>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis LabelFormat="{value} hrs" Minimum="2" Maximum="10" Interval="1">
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryYAxis>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartTooltipSettings Enable="true" EnableMarker="false" Format="${point.y}"></ChartTooltipSettings>
            <ChartSeriesCollection>
                <ChartSeries Type="ChartSeriesType.Bubble" DataSource="@SleepData" XName="Day" YName="Value" Size="Size" Fill="#4526A6">
                    <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>
    }
    else
    {
        <SfSkeleton Width="100%" Height="100%" Effect="ShimmerEffect.Wave"></SfSkeleton>
    }
</div>
<div class="col-sm-12 col-md-12 col-12 col-lg-4 col-xl-4 second-chart-box row" style="height: 530px;">
    @if (isDataLoaded)
    {
    <div class="pieHeader" style="min-height: 10%">Sleep Quantity</div>
    <div style="width: 100%">
        <SfAccumulationChart Height="270px">
            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries DataSource="@SleepDayData" InnerRadius="60%" XName="X" YName="Y" StartAngle="270" EndAngle="90" TooltipMappingName="Text" Palettes="Colors" Radius="120%"></AccumulationChartSeries>
            </AccumulationChartSeriesCollection>
            <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
            <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
            <AccumulationChartAnnotations>
                <AccumulationChartAnnotation X="10%" Y="108%" Region="Regions.Series">
                    <ContentTemplate>
                        <div class="annotation-text">@Start</div>
                    </ContentTemplate>
                </AccumulationChartAnnotation>
                <AccumulationChartAnnotation X="50%" Y="75%">
                    <ContentTemplate>
                        <div id="middlecontent" style="font-family: Roboto; font-weight:500; font-size: 13px; color: #4A4A4A; letter-spacing: -0.08px; text-align: center;">
                            Total hours of sleep <br>
                            <p style="font-size: 49px">@Total</p><br>
                        </div>
                    </ContentTemplate>
                </AccumulationChartAnnotation>
                <AccumulationChartAnnotation X="90%" Y="108%" Region="Regions.Series">
                    <ContentTemplate>
                        <div class="annotation-text">@End</div>
                    </ContentTemplate>
                </AccumulationChartAnnotation>
            </AccumulationChartAnnotations>
        </SfAccumulationChart>
    </div>
    <div class="row" style="width: 100%">
        <table class="table table-bordered">
            <tr style="height: 100px">
                <td>
                    <div class="sleep-table-bold-text"><b>@DeepData</b></div>
                    <div class="sleep-table-text">Deep Sleep</div>
                </td>
                <td>
                    <div class="sleep-table-bold-text"><b>@LightData</b></div>
                    <div class="sleep-table-text">Light Sleep</div>
                </td>
            </tr>
            <tr style="height: 100px">
                <td>
                    <div class="sleep-table-bold-text"><b>@AwakeData</b></div>
                    <div class="sleep-table-text">Awake</div>
                </td>
                <td>
                    <div class="sleep-table-bold-text"><b>@RemData</b></div>
                    <div class="sleep-table-text">Light</div>
                </td>
            </tr>
        </table>
    </div>
    }
    else
    {
        <SfSkeleton Width="100%" Height="100%" Effect="ShimmerEffect.Wave"></SfSkeleton>
    }
</div>

@code {
    List<Data>? SleepData;
    List<ChartData>? SleepDayData;
    string[] Colors = new string[] { "#6137E3", "#392178", "#9572FF", "#4F2BAF", "#392178", "#9572FF", "#6137E3", "#4F2BAF", "#392178" };

    string DeepData = "5h 24 mins";
    string LightData = "2h 15 mins";
    string AwakeData = "27mins";
    string RemData = "54mins";
    string Start = "9:30 pm";
    string End = "6:30 am";
    string Total = "9";
    private bool isDataLoaded;
    private async void LoadData()
    {
        await GetChartData();
        isDataLoaded = true;
        StateHasChanged();
    }
    private async Task GetChartData()
    {
        await Task.Delay(2000);
        this.SleepData = new List<Data>
{
            new Data { Day = "Sunday" , Value = 9, Size = 4.837 },
            new Data { Day = "Monday" , Value = 6, Size = 2.347},
            new Data { Day = "Tuesday" , Value = 6, Size = 2.347},
            new Data { Day = "Wednesday" , Value = 7, Size = 3.527 },
            new Data { Day = "Thursday" , Value = 8, Size = 4.047 },
            new Data { Day = "Friday" , Value = 5, Size = 1.582 },
            new Data { Day = "Saturday" , Value = 9, Size = 4.837 },
        };
        SleepDayData = HealthDataSunday.Sleep();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoadData();
        }
    }

    void FindSleepDayData(PointEventArgs args)
    {
        switch (args.PointIndex)
        {
            case 0:
                this.SleepDayData = HealthDataSunday.Sleep();
                Start = "9:30 pm";
                End = "6:30 am";
                Total = "9";
                DeepData = "5h 24 mins";
                LightData = "2h 15 mins";
                AwakeData = "27 mins";
                RemData = "54 mins";
                break;
            case 1:
                this.SleepDayData = HealthDataMonday.Sleep();
                Start = "11:40 pm";
                End = "5:40 am";
                Total = "6";
                DeepData = "3h 54 mins";
                LightData = "1h 22 mins";
                AwakeData = "18 mins";
                RemData = "36 mins";
                break;
            case 2:
                this.SleepDayData = HealthDataTuesday.Sleep();
                Start = "10:30 pm";
                End = "4:30 am";
                Total = "6";
                DeepData = "3h 54 mins";
                LightData = "1h 30 mins";
                AwakeData = "18 mins";
                RemData = "18 mins";
                break;
            case 3:
                this.SleepDayData = HealthDataWednesday.Sleep();
                Start = "10:30 pm";
                End = "5:30 am";
                Total = "7";
                DeepData = "3h 51 mins";
                LightData = "2h 06 mins";
                AwakeData = "21 mins";
                RemData = "42 mins";
                break;
            case 4:
                this.SleepDayData = HealthDataThursday.Sleep();
                Start = "11:00 pm";
                End = "7:00 am";
                Total = "8";
                DeepData = "4h 48 mins";
                LightData = "2h 24 mins";
                AwakeData = "24 mins";
                RemData = "24 mins";
                break;
            case 5:
                this.SleepDayData = HealthDataFriday.Sleep();
                Start = "11:40 pm";
                End = "4:40 am";
                Total = "5";
                DeepData = "3h 45 mins";
                LightData = "45 mins";
                AwakeData = "15 mins";
                RemData = "15 mins";
                break;
            case 6:
                this.SleepDayData = HealthDataSaturday.Sleep();
                Start = "9:40 pm";
                End = "6:40 am";
                Total = "9";
                DeepData = "6h 18 mins";
                LightData = "1h 48 mins";
                AwakeData = "27 mins";
                RemData = "27 mins";
                break;
        }
        StateHasChanged();
    }

}